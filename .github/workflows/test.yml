name: CI Pipeline

# Define os gatilhos para a execução da pipeline
on:
  push:
    branches:
      - main  # Executa a pipeline para push na branch 'main'
  pull_request:
    branches:
      - main  # Executa a pipeline para PR direcionado à branch 'main'

jobs:
  test:
    runs-on: ubuntu-latest  # Define o ambiente de execução como Ubuntu mais recente

    steps:
      # 1. Checkout do código
      - name: Checkout code
        uses: actions/checkout@v2

      # 2. Configuração do Python
      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: '3.10'

      # 3. Instalação das dependências
      - name: Install dependencies
        run: |
          python -m venv .venv  # Cria um ambiente virtual chamado '.venv'
          source .venv/bin/activate  # Ativa o ambiente virtual
          pip install -r requirements.txt  # Instala as dependências listadas

      # 4. Execução dos testes backend
      - name: Run backend tests
        run: |
          source .venv/bin/activate  # Garante que o ambiente virtual está ativado
          pytest tests/backend/ --cov=app/  # Roda os testes do backend com cobertura na pasta 'app'

      # 5. Execução dos testes frontend
      - name: Run frontend tests
        run: |
          source .venv/bin/activate  # Garante que o ambiente virtual está ativado
          pytest tests/frontend/  # Roda os testes do frontend

      # 6. Geração de relatório de cobertura
      - name: Generate coverage report
        run: |
          source .venv/bin/activate  # Garante que o ambiente virtual está ativado
          coverage html  # Gera o relatório de cobertura em formato HTML
          coverage report  # Mostra o relatório de cobertura no terminal
          coverage xml  # Gera o relatório de cobertura em XML para CI

    env:
      TZ: UTC  # Define o fuso horário como UTC
